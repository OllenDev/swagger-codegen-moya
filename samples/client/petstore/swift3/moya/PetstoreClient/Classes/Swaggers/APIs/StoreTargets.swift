//
// StoreTargets.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class StoreTargets {
    /**
    Delete purchase order by ID
    - DELETE /store/order/{orderId}
    - For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
     
    - parameter orderId: (path) ID of the order that needs to be deleted 
    */

    struct deleteOrderTarget: APITargetType {

        var path: String {
            var path: String = = "/store/order/{orderId}"
            return path.replacingOccurrences(of: "{orderId}", with: "\(orderId)", options: .literal, range: nil)
        }

        let method = Moya.Method(rawValue: "DELETE")

        let orderId: String
    }
    /**
    Returns pet inventories by status
    - GET /store/inventory
    - Returns a map of status codes to quantities
    - API Key:
        - type: apiKey api_key 
        - name: api_key
    - examples: 
        [{contentType=application/json, example={
  "key" : 0
}}]
    */

    struct getInventoryTarget: APITargetType {

        let path: String = "/store/inventory"
        let method = Moya.Method(rawValue: "GET")

    }
    /**
    Find purchase order by ID
    - GET /store/order/{orderId}
    - For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions
    - examples: 
        [{contentType=application/xml, example=<Order>
  <id>123456789</id>
  <petId>123456789</petId>
  <quantity>123</quantity>
  <shipDate>2000-01-23T04:56:07.000Z</shipDate>
  <status>aeiou</status>
  <complete>true</complete>
</Order>}, {contentType=application/json, example={
  "petId" : 6,
  "quantity" : 1,
  "id" : 0,
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "complete" : false,
  "status" : "placed"
}}]
    - examples: 
        [{contentType=application/xml, example=<Order>
  <id>123456789</id>
  <petId>123456789</petId>
  <quantity>123</quantity>
  <shipDate>2000-01-23T04:56:07.000Z</shipDate>
  <status>aeiou</status>
  <complete>true</complete>
</Order>}, {contentType=application/json, example={
  "petId" : 6,
  "quantity" : 1,
  "id" : 0,
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "complete" : false,
  "status" : "placed"
}}]
     
    - parameter orderId: (path) ID of pet that needs to be fetched 
    */

    struct getOrderByIdTarget: APITargetType {

        var path: String {
            var path: String = = "/store/order/{orderId}"
            return path.replacingOccurrences(of: "{orderId}", with: "\(orderId)", options: .literal, range: nil)
        }

        let method = Moya.Method(rawValue: "GET")

        let orderId: Int64
    }
    /**
    Place an order for a pet
    - POST /store/order
    - 
    - examples: 
        [{contentType=application/xml, example=<Order>
  <id>123456789</id>
  <petId>123456789</petId>
  <quantity>123</quantity>
  <shipDate>2000-01-23T04:56:07.000Z</shipDate>
  <status>aeiou</status>
  <complete>true</complete>
</Order>}, {contentType=application/json, example={
  "petId" : 6,
  "quantity" : 1,
  "id" : 0,
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "complete" : false,
  "status" : "placed"
}}]
    - examples: 
        [{contentType=application/xml, example=<Order>
  <id>123456789</id>
  <petId>123456789</petId>
  <quantity>123</quantity>
  <shipDate>2000-01-23T04:56:07.000Z</shipDate>
  <status>aeiou</status>
  <complete>true</complete>
</Order>}, {contentType=application/json, example={
  "petId" : 6,
  "quantity" : 1,
  "id" : 0,
  "shipDate" : "2000-01-23T04:56:07.000+00:00",
  "complete" : false,
  "status" : "placed"
}}]
     
    - parameter body: (body) order placed for purchasing the pet 
    */

    struct placeOrderTarget: APITargetType {

        let path: String = "/store/order"
        let method = Moya.Method(rawValue: "POST")

        let body: Order
        
        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var bodyParams: Parameters = [:]
            bodyParams["body"] = body
            compositeParameters.bodyParameters = bodyParams

            return compositeParameters.toParameters()
        }
    }
}
