//
// UserTargets.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class UserTargets {
    /**
    Create user
    - POST /user
    - This can only be done by the logged in user.
     
    - parameter body: (body) Created user object 
    */

    struct createUserTarget: APITargetType {

        let path: String = "/user"
        let method = Moya.Method(rawValue: "POST")

        let body: User
        
        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var bodyParams: Parameters = [:]
            bodyParams["body"] = body
            compositeParameters.bodyParameters = bodyParams

            return compositeParameters.toParameters()
        }
    }
    /**
    Creates list of users with given input array
    - POST /user/createWithArray
    - 
     
    - parameter body: (body) List of user object 
    */

    struct createUsersWithArrayInputTarget: APITargetType {

        let path: String = "/user/createWithArray"
        let method = Moya.Method(rawValue: "POST")

        let body: [User]
        
        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var bodyParams: Parameters = [:]
            bodyParams["body"] = body
            compositeParameters.bodyParameters = bodyParams

            return compositeParameters.toParameters()
        }
    }
    /**
    Creates list of users with given input array
    - POST /user/createWithList
    - 
     
    - parameter body: (body) List of user object 
    */

    struct createUsersWithListInputTarget: APITargetType {

        let path: String = "/user/createWithList"
        let method = Moya.Method(rawValue: "POST")

        let body: [User]
        
        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var bodyParams: Parameters = [:]
            bodyParams["body"] = body
            compositeParameters.bodyParameters = bodyParams

            return compositeParameters.toParameters()
        }
    }
    /**
    Delete user
    - DELETE /user/{username}
    - This can only be done by the logged in user.
     
    - parameter username: (path) The name that needs to be deleted 
    */

    struct deleteUserTarget: APITargetType {

        var path: String {
            var path: String = = "/user/{username}"
            return path.replacingOccurrences(of: "{username}", with: "\(username)", options: .literal, range: nil)
        }

        let method = Moya.Method(rawValue: "DELETE")

        let username: String
    }
    /**
    Get user by user name
    - GET /user/{username}
    - 
    - examples: 
        [{contentType=application/xml, example=<User>
  <id>123456789</id>
  <username>aeiou</username>
  <firstName>aeiou</firstName>
  <lastName>aeiou</lastName>
  <email>aeiou</email>
  <password>aeiou</password>
  <phone>aeiou</phone>
  <userStatus>123</userStatus>
</User>}, {contentType=application/json, example={
  "firstName" : "aeiou",
  "lastName" : "aeiou",
  "password" : "aeiou",
  "userStatus" : 6,
  "phone" : "aeiou",
  "id" : 0,
  "email" : "aeiou",
  "username" : "aeiou"
}}]
    - examples: 
        [{contentType=application/xml, example=<User>
  <id>123456789</id>
  <username>aeiou</username>
  <firstName>aeiou</firstName>
  <lastName>aeiou</lastName>
  <email>aeiou</email>
  <password>aeiou</password>
  <phone>aeiou</phone>
  <userStatus>123</userStatus>
</User>}, {contentType=application/json, example={
  "firstName" : "aeiou",
  "lastName" : "aeiou",
  "password" : "aeiou",
  "userStatus" : 6,
  "phone" : "aeiou",
  "id" : 0,
  "email" : "aeiou",
  "username" : "aeiou"
}}]
     
    - parameter username: (path) The name that needs to be fetched. Use user1 for testing.  
    */

    struct getUserByNameTarget: APITargetType {

        var path: String {
            var path: String = = "/user/{username}"
            return path.replacingOccurrences(of: "{username}", with: "\(username)", options: .literal, range: nil)
        }

        let method = Moya.Method(rawValue: "GET")

        let username: String
    }
    /**
    Logs user into the system
    - GET /user/login
    - 
    - responseHeaders: [X-Rate-Limit(Int32), X-Expires-After(Date)]
    - responseHeaders: [X-Rate-Limit(Int32), X-Expires-After(Date)]
    - examples: 
        [{contentType=application/xml, example=aeiou}, {contentType=application/json, example="aeiou"}]
    - examples: 
        [{contentType=application/xml, example=aeiou}, {contentType=application/json, example="aeiou"}]
     
    - parameter username: (query) The user name for login 
    - parameter password: (query) The password for login in clear text 
    */

    struct loginUserTarget: APITargetType {

        let path: String = "/user/login"
        let method = Moya.Method(rawValue: "GET")

        let username: String
        let password: String
        
        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var queryParams: Parameters = [:]
            queryParams["username"] = username
            queryParams["password"] = password
            compositeParameters.queryParameters = queryParams

            return compositeParameters.toParameters()
        }
    }
    /**
    Logs out current logged in user session
    - GET /user/logout
    - 
    */

    struct logoutUserTarget: APITargetType {

        let path: String = "/user/logout"
        let method = Moya.Method(rawValue: "GET")

    }
    /**
    Updated user
    - PUT /user/{username}
    - This can only be done by the logged in user.
     
    - parameter username: (path) name that need to be deleted 
    - parameter body: (body) Updated user object 
    */

    struct updateUserTarget: APITargetType {

        var path: String {
            var path: String = = "/user/{username}"
            return path.replacingOccurrences(of: "{username}", with: "\(username)", options: .literal, range: nil)
        }

        let method = Moya.Method(rawValue: "PUT")

        let username: String
        let body: User
        
        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var bodyParams: Parameters = [:]
            bodyParams["body"] = body
            compositeParameters.bodyParameters = bodyParams

            return compositeParameters.toParameters()
        }
    }
}
