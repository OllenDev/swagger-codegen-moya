//
// PetTargets.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



open class PetTargets {
    /**
    Add a new pet to the store
    - POST /pet
    - 
    - OAuth:
        - type: oauth2
        - name: petstore_auth
     
    - parameter body: (body) Pet object that needs to be added to the store 
    */

    struct addPetTarget: APITargetType {

        let path: String = "/pet"
        let method = Moya.Method(rawValue: "POST")

        let body: Pet
        
        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var bodyParams: Parameters = [:]
            bodyParams["body"] = body
            compositeParameters.bodyParameters = bodyParams

            return compositeParameters.toParameters()
        }
    }
    /**
    Deletes a pet
    - DELETE /pet/{petId}
    - 
    - OAuth:
        - type: oauth2
        - name: petstore_auth
     
    - parameter petId: (path) Pet id to delete 
    - parameter apiKey: (header)  (optional)
    */

    struct deletePetTarget: APITargetType, HeaderTargetConvertible {

        var path: String {
            var path: String = = "/pet/{petId}"
            return path.replacingOccurrences(of: "{petId}", with: "\(petId)", options: .literal, range: nil)
        }

        let method = Moya.Method(rawValue: "DELETE")

        let petId: Int64
        let apiKey: String?
        
        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var headerParams: [String: String] = [:]
            headerParams["api_key"] = apiKey
            compositeParameters.headerParameters = headerParams

            return compositeParameters.toParameters()
        }
    }
    /**
    Finds Pets by status
    - GET /pet/findByStatus
    - Multiple status values can be provided with comma separated strings
    - OAuth:
        - type: oauth2
        - name: petstore_auth
    - examples: 
        [{contentType=application/xml, example=<Pet>
  <id>123456789</id>
  <name>doggie</name>
  <photoUrls>
    <photoUrls>aeiou</photoUrls>
  </photoUrls>
  <tags>
  </tags>
  <status>aeiou</status>
</Pet>}, {contentType=application/json, example=[ {
  "photoUrls" : [ "aeiou" ],
  "name" : "doggie",
  "id" : 0,
  "category" : {
    "name" : "aeiou",
    "id" : 6
  },
  "tags" : [ {
    "name" : "aeiou",
    "id" : 1
  } ],
  "status" : "available"
} ]}]
    - examples: 
        [{contentType=application/xml, example=<Pet>
  <id>123456789</id>
  <name>doggie</name>
  <photoUrls>
    <photoUrls>aeiou</photoUrls>
  </photoUrls>
  <tags>
  </tags>
  <status>aeiou</status>
</Pet>}, {contentType=application/json, example=[ {
  "photoUrls" : [ "aeiou" ],
  "name" : "doggie",
  "id" : 0,
  "category" : {
    "name" : "aeiou",
    "id" : 6
  },
  "tags" : [ {
    "name" : "aeiou",
    "id" : 1
  } ],
  "status" : "available"
} ]}]
     
    - parameter status: (query) Status values that need to be considered for filter 
    */

    struct findPetsByStatusTarget: APITargetType {

        let path: String = "/pet/findByStatus"
        let method = Moya.Method(rawValue: "GET")

        let status: [String]
        
        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var queryParams: Parameters = [:]
            queryParams["status"] = status
            compositeParameters.queryParameters = queryParams

            return compositeParameters.toParameters()
        }
    }
    /**
    Finds Pets by tags
    - GET /pet/findByTags
    - Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
    - OAuth:
        - type: oauth2
        - name: petstore_auth
    - examples: 
        [{contentType=application/xml, example=<Pet>
  <id>123456789</id>
  <name>doggie</name>
  <photoUrls>
    <photoUrls>aeiou</photoUrls>
  </photoUrls>
  <tags>
  </tags>
  <status>aeiou</status>
</Pet>}, {contentType=application/json, example=[ {
  "photoUrls" : [ "aeiou" ],
  "name" : "doggie",
  "id" : 0,
  "category" : {
    "name" : "aeiou",
    "id" : 6
  },
  "tags" : [ {
    "name" : "aeiou",
    "id" : 1
  } ],
  "status" : "available"
} ]}]
    - examples: 
        [{contentType=application/xml, example=<Pet>
  <id>123456789</id>
  <name>doggie</name>
  <photoUrls>
    <photoUrls>aeiou</photoUrls>
  </photoUrls>
  <tags>
  </tags>
  <status>aeiou</status>
</Pet>}, {contentType=application/json, example=[ {
  "photoUrls" : [ "aeiou" ],
  "name" : "doggie",
  "id" : 0,
  "category" : {
    "name" : "aeiou",
    "id" : 6
  },
  "tags" : [ {
    "name" : "aeiou",
    "id" : 1
  } ],
  "status" : "available"
} ]}]
     
    - parameter tags: (query) Tags to filter by 
    */

    struct findPetsByTagsTarget: APITargetType {

        let path: String = "/pet/findByTags"
        let method = Moya.Method(rawValue: "GET")

        let tags: [String]
        
        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var queryParams: Parameters = [:]
            queryParams["tags"] = tags
            compositeParameters.queryParameters = queryParams

            return compositeParameters.toParameters()
        }
    }
    /**
    Find pet by ID
    - GET /pet/{petId}
    - Returns a single pet
    - API Key:
        - type: apiKey api_key 
        - name: api_key
    - examples: 
        [{contentType=application/xml, example=<Pet>
  <id>123456789</id>
  <name>doggie</name>
  <photoUrls>
    <photoUrls>aeiou</photoUrls>
  </photoUrls>
  <tags>
  </tags>
  <status>aeiou</status>
</Pet>}, {contentType=application/json, example={
  "photoUrls" : [ "aeiou" ],
  "name" : "doggie",
  "id" : 0,
  "category" : {
    "name" : "aeiou",
    "id" : 6
  },
  "tags" : [ {
    "name" : "aeiou",
    "id" : 1
  } ],
  "status" : "available"
}}]
    - examples: 
        [{contentType=application/xml, example=<Pet>
  <id>123456789</id>
  <name>doggie</name>
  <photoUrls>
    <photoUrls>aeiou</photoUrls>
  </photoUrls>
  <tags>
  </tags>
  <status>aeiou</status>
</Pet>}, {contentType=application/json, example={
  "photoUrls" : [ "aeiou" ],
  "name" : "doggie",
  "id" : 0,
  "category" : {
    "name" : "aeiou",
    "id" : 6
  },
  "tags" : [ {
    "name" : "aeiou",
    "id" : 1
  } ],
  "status" : "available"
}}]
     
    - parameter petId: (path) ID of pet to return 
    */

    struct getPetByIdTarget: APITargetType {

        var path: String {
            var path: String = = "/pet/{petId}"
            return path.replacingOccurrences(of: "{petId}", with: "\(petId)", options: .literal, range: nil)
        }

        let method = Moya.Method(rawValue: "GET")

        let petId: Int64
    }
    /**
    Update an existing pet
    - PUT /pet
    - 
    - OAuth:
        - type: oauth2
        - name: petstore_auth
     
    - parameter body: (body) Pet object that needs to be added to the store 
    */

    struct updatePetTarget: APITargetType {

        let path: String = "/pet"
        let method = Moya.Method(rawValue: "PUT")

        let body: Pet
        
        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var bodyParams: Parameters = [:]
            bodyParams["body"] = body
            compositeParameters.bodyParameters = bodyParams

            return compositeParameters.toParameters()
        }
    }
    /**
    Updates a pet in the store with form data
    - POST /pet/{petId}
    - 
    - OAuth:
        - type: oauth2
        - name: petstore_auth
     
    - parameter petId: (path) ID of pet that needs to be updated 
    - parameter name: (form) Updated name of the pet (optional)
    - parameter status: (form) Updated status of the pet (optional)
    */

    struct updatePetWithFormTarget: APITargetType {

        var path: String {
            var path: String = = "/pet/{petId}"
            return path.replacingOccurrences(of: "{petId}", with: "\(petId)", options: .literal, range: nil)
        }

        let method = Moya.Method(rawValue: "POST")

        let petId: Int64
        let name: String?
        let status: String?
        
        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var formParams: Parameters = [:]
            formParams["name"] = name
            formParams["status"] = status
            compositeParameters.formParameters = formParams

            return compositeParameters.toParameters()
        }
    }
    /**
    uploads an image
    - POST /pet/{petId}/uploadImage
    - 
    - OAuth:
        - type: oauth2
        - name: petstore_auth
    - examples: 
        [{contentType=application/json, example={
  "code" : 0,
  "type" : "aeiou",
  "message" : "aeiou"
}}]
     
    - parameter petId: (path) ID of pet to update 
    - parameter additionalMetadata: (form) Additional data to pass to server (optional)
    - parameter file: (form) file to upload (optional)
    */

    struct uploadFileTarget: APITargetType {

        var path: String {
            var path: String = = "/pet/{petId}/uploadImage"
            return path.replacingOccurrences(of: "{petId}", with: "\(petId)", options: .literal, range: nil)
        }

        let method = Moya.Method(rawValue: "POST")

        var task: Taks {
            var formData: [Moya.MultipartFormData] = []

            let additionalMetadataData: Moya.MultipartFormData(provider: .data(additionalMetadata), name: "additionalMetadata", fileName: "additionalMetadata", mimeType: additionalMetadata.mimeType)
            formData.append(additionalMetadataData)


            let fileData: Moya.MultipartFormData(provider: .data(file), name: "file", fileName: "file", mimeType: file.mimeType)
            formData.append(fileData)

            return .upload(.multipart(formData))
        }
        
        let petId: Int64
        let additionalMetadata: String?
        let file: Data?
        
        var parameters: Parameters? {
            var compositeParameters: CompositeParameters = CompositeParameters()

            var formParams: Parameters = [:]
            compositeParameters.formParameters = formParams

            return compositeParameters.toParameters()
        }
    }
}
