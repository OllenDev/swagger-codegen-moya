// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Marshal

let formatters = [
        "yyyy-MM-dd",
        "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
        "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
        "yyyy-MM-dd'T'HH:mm:ss'Z'",
        "yyyy-MM-dd'T'HH:mm:ss.SSS",
        "yyyy-MM-dd HH:mm:ss"
    ]
    .map { (format: String) -> DateFormatter in
        let formatter = DateFormatter()
        formatter.dateFormat = format
        return formatter
    }

extension Date: ValueType {

    public static func value(from object: Any) throws -> Date {
        guard let dateString = object as? String else {
            throw MarshalError.typeMismatch(expected: String.self, actual: type(of: object))
        }
        for formatter in formatters {
            if let date = formatter.date(from: dateString) {
                return date
            }
        }
        throw MarshalError.typeMismatch(expected: Date.self, actual: type(of: object))
    }

}

extension UUID: ValueType {

    public static func value(from object: Any) throws -> UUID {
        guard let uuidString = object as? String else {
            throw MarshalError.typeMismatch(expected: String.self, actual: type(of: object))
        }
        if let uuid = UUID(uuidString: uuidString) {
            return uuid
        }
        throw MarshalError.typeMismatch(expected: UUID.self, actual: type(of: object))
    }

}

extension Data: ValueType {

    public static func value(from object: Any) throws -> Data {
        guard let dataString = object as? String else {
            throw MarshalError.typeMismatch(expected: String.self, actual: type(of: object))
        }
        if let data = Data(base64Encoded: dataString) {
            return data
        }
        throw MarshalError.typeMismatch(expected: Data.self, actual: type(of: object))
    }

}
