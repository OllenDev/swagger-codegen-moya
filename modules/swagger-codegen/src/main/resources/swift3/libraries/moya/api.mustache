{{#operations}}//
// {{classname}}.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import RxSwift
import Moya

enum {{classname}} {
{{#operation}}
    case {{operationId}}{{#allParams}}{{#-first}}({{/-first}}{{^-first}}, {{/-first}}{{{paramName}}}: {{{dataType}}}{{#-last}}){{/-last}}{{/allParams}}
{{/operation}}
}

extension {{classname}}: TargetType {

    var baseURL: URL { return URL(string: "{{basePath}}")! }

    var path: String {
        switch self {
        {{#operation}}
        case .{{operationId}}{{#allParams}}{{#-first}}({{/-first}}{{^-first}}, {{/-first}}let {{{paramName}}}{{#-last}}){{/-last}}{{/allParams}}:
            {{^pathParams}}
            return "{{path}}"
            {{/pathParams}}
            {{#pathParams}}
            let path: String = "{{path}}"
            return path.replacingOccurrences(of: "{{=<% %>=}}{<%baseName%>}<%={{ }}=%>", with: "\({{paramName}}{{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}.rawValue{{/isContainer}}{{/isEnum}})", options: .literal, range: nil)
            {{/pathParams}}
        {{/operation}}
        }
    }

    /// The HTTP method used in the request.
    var method: Moya.Method {
        switch self {
        {{#operation}}
        case .{{operationId}}:
            return Moya.Method(rawValue: "{{httpMethod}}")!
        {{/operation}}
        }
    }

    /// The parameters to be encoded in the request.
    var parameters: [String: Any]? {
        switch self {
        {{#operation}}
        case .{{operationId}}{{#allParams}}{{#-first}}({{/-first}}{{^-first}}, {{/-first}}let {{{paramName}}}{{#-last}}){{/-last}}{{/allParams}}:
        {{^queryParams}}{{^bodyParam}}return nil{{/bodyParam}}{{/queryParams}}
        {{#hasQueryParam}}return {{#queryParams}}{{#-first}}[{{/-first}}{{^-first}}, {{/-first}}"{{paramName}}": {{paramName}}{{#-last}}]{{/-last}}{{/queryParams}}{{/hasQueryParam}}
        {{#hasBodyParam}}return {{#bodyParams}}{{#-first}}[{{/-first}}{{^-first}}, {{/-first}}"{{paramName}}": {{paramName}}{{#-last}}]{{/-last}}{{/bodyParams}}{{/hasBodyParam}}
        {{^hasBodyParam}}return {{#allParams}}{{#-first}}[{{/-first}}{{^-first}}, {{/-first}}"{{paramName}}": {{paramName}}{{#-last}}]{{/-last}}{{/allParams}}{{/hasBodyParam}}
        {{#hasFormParam}}return form{{/hasFormParam}}
        {{/operation}}
        }
    }

    /// The method used for parameter encoding.
    var parameterEncoding: ParameterEncoding {
        switch self {
        {{#operation}}
        case .{{operationId}}:
            return {{^hasBodyParam}}URLEncoding.default{{/hasBodyParam}}{{#hasBodyParam}}JSONEncoding.default{{/hasBodyParam}}
        {{/operation}}
        }
    }

    /// Provides stub data for use in testing.
    var sampleData: Data { return "Half measures are as bad as nothing at all.".utf8Encoded }

    /// The type of HTTP task to be performed.
    var task: Task { return Task.request }

}

// MARK: - Helpers
private extension String {
var urlEscaped: String {
return self.addingPercentEncoding(withAllowedCharacters: .urlHostAllowed)!
}

var utf8Encoded: Data {
return self.data(using: .utf8)!
}
}
{{/operations}}