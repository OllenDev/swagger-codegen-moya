{{#operations}}//
// {{classname}}.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire{{#usePromiseKit}}
import PromiseKit{{/usePromiseKit}}{{#useRxSwift}}
import RxSwift{{/useRxSwift}}

{{#swiftUseApiNamespace}}
extension {{projectName}}API {
{{/swiftUseApiNamespace}}

{{#description}}
/** {{description}} */{{/description}}
open class {{classname}} {
{{#operation}}
    /**
    {{#summary}}
    {{{summary}}}
    {{/summary}}
    - {{httpMethod}} {{path}}{{#notes}}
    - {{{notes}}}{{/notes}}{{#subresourceOperation}}
    - subresourceOperation: {{subresourceOperation}}{{/subresourceOperation}}{{#defaultResponse}}
    - defaultResponse: {{defaultResponse}}{{/defaultResponse}}{{#authMethods}}
    - {{#isBasic}}BASIC{{/isBasic}}{{#isOAuth}}OAuth{{/isOAuth}}{{#isApiKey}}API Key{{/isApiKey}}:
        - type: {{type}}{{#keyParamName}} {{keyParamName}} {{#isKeyInQuery}}(QUERY){{/isKeyInQuery}}{{#isKeyInHeaer}}(HEADER){{/isKeyInHeaer}}{{/keyParamName}}
        - name: {{name}}{{/authMethods}}{{#responseHeaders}}
    - responseHeaders: {{responseHeaders}}{{/responseHeaders}}{{#examples}}
    - examples: 
        {{{examples}}}{{/examples}}{{#externalDocs}}
    - externalDocs: {{externalDocs}}{{/externalDocs}}{{#hasParams}}
     {{/hasParams}}{{#allParams}}
    - parameter {{paramName}}: ({{#isFormParam}}form{{/isFormParam}}{{#isQueryParam}}query{{/isQueryParam}}{{#isPathParam}}path{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isBodyParam}}body{{/isBodyParam}}) {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{/allParams}}
    */

    struct {{operationId}}Target: APITargetType{{#hasHeaderParams}}, HeaderTargetConvertible{{/hasHeaderParams}} {

        {{^pathParams}}let path: String = "{{path}}"{{/pathParams}}{{#pathParams}}{{^secondaryParam}}var{{/secondaryParam}} path: String {
            var path: String = = "{{path}}"
            return path.replacingOccurrences(of: "{{=<% %>=}}{<%baseName%>}<%={{ }}=%>", with: "\({{paramName}}{{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}.rawValue{{/isContainer}}{{/isEnum}})", options: .literal, range: nil)
        }
        {{/pathParams}}

        let method = Moya.Method(rawValue: "{{httpMethod}}")

        {{#hasFormParams}}
        {{#isMultipart}}
        {{>parameters/multipart}}
        {{/isMultipart}}
        {{/hasFormParams}}
        {{#allParams}}
        let {{{paramName}}}: {{{dataType}}}{{^required}}?{{/required}}
        {{/allParams}}
        {{#hasParams}}
        {{^hasPathParamsOnly}}
        
        {{>parameters/parameters}}
        {{/hasPathParamsOnly}}
        {{/hasParams}}
    }
{{/operation}}
}
{{#swiftUseApiNamespace}}
}
{{/swiftUseApiNamespace}}
{{/operations}}
